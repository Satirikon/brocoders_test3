{"version":3,"sources":["grid/components/gridField/GridColumn.jsx","grid/components/gridField/GridRow.jsx","grid/components/gridField/GridFields.jsx","grid/components/actionButton/ActionButton.jsx","grid/grid.service.js","grid/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["GridColumn","_ref","cellSize","onColMouseOver","rowIndex","colIndex","react_default","a","createElement","className","style","height","concat","width","onMouseOver","GridRow","columns","map","value","index","components_gridField_GridColumn","key","GridFields","onGridMouseLeave","rows","onMouseLeave","components_gridField_GridRow","React","memo","_ref$text","text","_ref$style","props","Object","objectWithoutProperties","assign","objectSpread","getUniqValue","Date","getTime","Grid","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clearTimer","clearTimeout","timer","hideDelButtons","setState","isDelBtnRowVisible","isDelBtnColVisible","_this$state","state","activeRowIndex","activeColumnIndex","length","setTimeout","onAddColClick","prevState","toConsumableArray","onAddRowClick","onDelColClick","_this$state2","splice","onDelRowClick","_this$state3","Array","initialHeight","keys","initialWidth","_this$state4","padding","components_actionButton_ActionButton","onClick","top","onMouseEnter","left","components_gridField_GridFields","Component","App","src_grid_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.989fed13.chunk.js","sourcesContent":["import React from 'react';\r\nimport './GridColumn.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GridColumn = ({ cellSize, onColMouseOver, rowIndex, colIndex }) => (\r\n  <div\r\n    className=\"column\"\r\n    style={{ height: `${cellSize}px`, width: `${cellSize}px` }}\r\n    onMouseOver={() => onColMouseOver(rowIndex, colIndex)}\r\n  />\r\n);\r\n\r\nGridColumn.propTypes = {\r\n  cellSize: PropTypes.number,\r\n  onColMouseOver: PropTypes.func,\r\n  rowIndex: PropTypes.number,\r\n  colIndex: PropTypes.number\r\n};\r\n\r\nexport default GridColumn;\r\n","import React from 'react';\r\nimport GridColumn from './GridColumn';\r\nimport './GridRow.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GridRow = ({ columns, cellSize, onColMouseOver, rowIndex }) => (\r\n  <div className=\"row\">\r\n    {columns.map((value, index) => {\r\n      return (\r\n        <GridColumn\r\n          key={value}\r\n          cellSize={cellSize}\r\n          rowIndex={rowIndex}\r\n          colIndex={index}\r\n          onColMouseOver={onColMouseOver}\r\n        />\r\n      );\r\n    })}\r\n  </div>\r\n);\r\n\r\nGridRow.propTypes = {\r\n  columns: PropTypes.array,\r\n  cellSize: PropTypes.number,\r\n  onColMouseOver: PropTypes.func,\r\n  rowIndex: PropTypes.number\r\n};\r\n\r\nexport default GridRow;\r\n","import React from 'react';\nimport GridRow from './GridRow';\nimport './GridFields.scss';\nimport PropTypes from 'prop-types';\n\nconst GridFields = ({\n  cellSize,\n  onColMouseOver,\n  onGridMouseLeave,\n  rows,\n  columns\n}) => (\n  <div className=\"grid-root\" onMouseLeave={onGridMouseLeave}>\n    {rows.map((value, index) => {\n      return (\n        <GridRow\n          key={value}\n          columns={columns}\n          cellSize={cellSize}\n          rowIndex={index}\n          onColMouseOver={onColMouseOver}\n        />\n      );\n    })}\n  </div>\n);\n\nGridFields.propTypes = {\n  cellSize: PropTypes.number,\n  onColMouseOver: PropTypes.func,\n  onGridMouseLeave: PropTypes.func,\n  rows: PropTypes.array,\n  columns: PropTypes.array\n};\n\nexport default GridFields;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ActionButton.scss';\n\nconst ActionButton = ({\n  className,\n  cellSize,\n  text = `+`,\n  style = {},\n  ...props\n}) => (\n  <button\n    className={`action-btn ${className}`}\n    style={{ height: `${cellSize}px`, width: `${cellSize}px`, ...style }}\n    {...props}\n  >\n    {' '}\n    {text}{' '}\n  </button>\n);\n\nActionButton.propTypes = {\n  className: PropTypes.string,\n  cellSize: PropTypes.number,\n  text: PropTypes.string,\n  style: PropTypes.shape({\n    top: PropTypes.string,\n    left: PropTypes.string\n  }),\n  props: PropTypes.shape({\n    onClick: PropTypes.func,\n    onDelBtnMouseEnter: PropTypes.func,\n    onDelBtnMouseLeave: PropTypes.func\n  })\n};\n\nexport default React.memo(ActionButton);\n","export const getUniqValue = (index) => `${new Date().getTime()}_${index}`;","import React, { Component } from 'react';\nimport GridFields from './components/gridField/GridFields';\nimport ActionButton from './components/actionButton/ActionButton';\nimport { getUniqValue } from './grid.service';\n\nimport './Grid.scss';\nimport PropTypes from 'prop-types';\n\nconst BUTTON_MARGIN = 5;\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n\n    this.state = {\n      rows: [...Array(props.initialHeight).keys()].map(index =>\n        getUniqValue(index)\n      ),\n      columns: [...Array(props.initialWidth).keys()].map(index =>\n        getUniqValue(index)\n      ),\n      activeRowIndex: 0,\n      activeColumnIndex: 0,\n      isDelBtnRowVisible: false,\n      isDelBtnColVisible: false\n    };\n  }\n\n  clearTimer = () => clearTimeout(this.timer);\n\n  hideDelButtons = () =>\n    this.setState({\n      isDelBtnRowVisible: false,\n      isDelBtnColVisible: false\n    });\n\n  onColMouseOver = (rowIndex, colIndex) => {\n    const { rows, columns } = this.state;\n    this.setState({\n      activeRowIndex: rowIndex,\n      activeColumnIndex: colIndex,\n      isDelBtnColVisible: columns.length > 1,\n      isDelBtnRowVisible: rows.length > 1\n    });\n  };\n\n  onGridMouseLeave = () => (this.timer = setTimeout(this.hideDelButtons, 200));\n\n  onAddColClick = () =>\n    this.setState(prevState => ({\n      columns: [...prevState.columns, getUniqValue(prevState.columns.length)]\n    }));\n\n  onAddRowClick = () =>\n    this.setState(prevState => ({\n      rows: [...prevState.rows, getUniqValue(prevState.rows.length)]\n    }));\n\n  onDelColClick = () => {\n    const { columns, activeColumnIndex } = this.state;\n    if (columns.length === 1) return;\n    columns.splice(activeColumnIndex, 1);\n    this.setState({ columns });\n\n    if (columns.length === activeColumnIndex || columns.length === 1)\n      this.hideDelButtons();\n  };\n\n  onDelRowClick = () => {\n    const { rows, activeRowIndex } = this.state;\n    if (rows.length === 1) return;\n    rows.splice(activeRowIndex, 1);\n    this.setState({ rows });\n\n    if (rows.length === activeRowIndex || rows.length === 1)\n      this.hideDelButtons();\n  };\n\n  render() {\n    const { cellSize } = this.props;\n    const {\n      rows,\n      columns,\n      isDelBtnColVisible,\n      isDelBtnRowVisible,\n      activeRowIndex,\n      activeColumnIndex\n    } = this.state;\n\n    return (\n      <div className=\"grid\" style={{ padding: `${cellSize + 2}px` }}>\n        <ActionButton\n          className=\"add-btn-row\"\n          cellSize={cellSize}\n          onClick={this.onAddRowClick}\n        />\n        <ActionButton\n          className=\"add-btn-col\"\n          cellSize={cellSize}\n          onClick={this.onAddColClick}\n        />\n        {isDelBtnRowVisible && (\n          <ActionButton\n            className=\"del-btn-row\"\n            cellSize={cellSize}\n            text=\"-\"\n            style={{\n              top: `${(activeRowIndex + 1) * cellSize + BUTTON_MARGIN}px`\n            }}\n            onMouseEnter={this.clearTimer}\n            onMouseLeave={this.hideDelButtons}\n            onClick={this.onDelRowClick}\n          />\n        )}\n        {isDelBtnColVisible && (\n          <ActionButton\n            className=\"del-btn-col\"\n            cellSize={cellSize}\n            text=\"-\"\n            style={{\n              left: `${(activeColumnIndex + 1) * cellSize + BUTTON_MARGIN}px`\n            }}\n            onMouseEnter={this.clearTimer}\n            onMouseLeave={this.hideDelButtons}\n            onClick={this.onDelColClick}\n          />\n        )}\n        <GridFields\n          rows={rows}\n          columns={columns}\n          cellSize={cellSize}\n          onColMouseOver={this.onColMouseOver}\n          onGridMouseLeave={this.onGridMouseLeave}\n        />\n      </div>\n    );\n  }\n}\n\nGrid.propTypes = {\n  initialWidth: PropTypes.number,\n  initialHeight: PropTypes.number,\n  cellSize: PropTypes.number\n};\n\nexport default Grid;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Grid from './grid/Grid';\n\nclass App extends Component {\n  render() {\n    return <Grid initialWidth={4} initialHeight={4} cellSize={55} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}