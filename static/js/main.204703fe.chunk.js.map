{"version":3,"sources":["grid/Components/GridField/GridFields.jsx","grid/Components/ActionButton/ActionButton.jsx","grid/grid.service.js","grid/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["GridColumn","_ref","cellSize","onColMouseOver","rowIndex","colIndex","react_default","a","createElement","className","style","height","width","onMouseOver","e","GridRow","_ref2","columns","map","value","index","GridFields_GridColumn","key","GridFields","_ref3","onGridMouseLeave","rows","onMouseLeave","GridFields_GridRow","ActionButton","_ref$text","text","_ref$style","onClick","concat","Object","objectSpread","getUniqValue","Date","getTime","Grid","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hideDelButtons","setState","delBtnStyles","top","display","left","currentColumn","target","_this$state","state","newState","activeIndexes","length","offsetLeft","offsetTop","setTimeout","ReactDOM","findDOMNode","assertThisInitialized","querySelectorAll","onAddColClick","toConsumableArray","onAddRowClick","onDelColClick","_this$state2","splice","onDelRowClick","_this$state3","Array","initialHeight","keys","initialWidth","_this$state4","Components_ActionButton_ActionButton","Components_GridField_GridFields","Component","App","src_grid_Grid","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.204703fe.chunk.js","sourcesContent":["import React from 'react';\n\nimport './GridFields.scss';\n\nconst GridColumn = ({cellSize, onColMouseOver, rowIndex, colIndex}) => (\n  <div\n    className=\"column\"\n    style={{height: cellSize, width: cellSize}}\n    onMouseOver={(e) => onColMouseOver(e, rowIndex, colIndex)}/>\n);\n\nconst GridRow = ({columns, cellSize, onColMouseOver, rowIndex}) => (\n  <div className=\"row\">\n    {columns.map((value, index) => {\n      return <GridColumn\n        key={value}\n        cellSize={cellSize}\n        rowIndex={rowIndex}\n        colIndex={index}\n        onColMouseOver={onColMouseOver}\n      />\n    })}\n  </div>\n);\n\nconst GridFields = ({cellSize, onColMouseOver, onGridMouseLeave, rows, columns}) => (\n  <div className=\"grid-root\" onMouseLeave={onGridMouseLeave}>\n    {rows.map((value, index) => {\n      return <GridRow\n        key={value}\n        columns={columns}\n        cellSize={cellSize}\n        rowIndex={index}\n        onColMouseOver={onColMouseOver}\n      />\n    })}\n  </div>\n);\n\n\nexport default GridFields;","import React from 'react';\n\nimport './ActionButton.scss';\n\nconst ActionButton = ({className, cellSize, text = `+`,style = {} , onClick}) => (\n  <button\n    className={`action-btn ${className}`}\n    style={{height: cellSize, width: cellSize, ...style }}\n    onClick={onClick}\n  > {text} </button>\n);\n\nexport default ActionButton;","export const getUniqValue = (index) => `${new Date().getTime()}_${index}`;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport GridFields from './Components/GridField/GridFields';\nimport ActionButton from './Components/ActionButton/ActionButton';\nimport {getUniqValue} from './grid.service';\n\nimport './Grid.scss';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [...Array(props.initialHeight).keys()].map((index)=>getUniqValue(index)),\n      columns: [...Array(props.initialWidth).keys()].map((index)=>getUniqValue(index)),\n      activeIndexes: [0, 0],\n      delBtnStyles: [{top: 0, display: 'none'}, {left: 0, display: 'none'}]\n    };\n  }\n\n  hideDelButtons = () => {\n    this.setState({delBtnStyles: [{top: 0, display: 'none'}, {left: 0, display: 'none'}]});\n  };\n\n  onColMouseOver = (e, rowIndex, colIndex) => {\n    const currentColumn = e.target;\n    const {rows, columns} = this.state;\n    let newState = {...this.state, activeIndexes: [rowIndex, colIndex]};\n    if (columns.length > 1) {\n      newState.delBtnStyles[1] = {left:`${currentColumn.offsetLeft}px`, display: 'inline'};\n    }\n    if (rows.length > 1) {\n      newState.delBtnStyles[0] = {top:`${currentColumn.offsetTop}px`, display: 'inline'};\n    }\n    this.setState(newState);\n  };\n\n  onGridMouseLeave = () => {\n    setTimeout(() => {\n      const selected = ReactDOM.findDOMNode(this).querySelectorAll('.del-btn-col:hover, .del-btn-row:hover');\n      if (!selected.length) this.hideDelButtons();\n    }, 200);\n  };\n\n  onAddColClick = () => {\n    const {columns} = this.state;\n    this.setState({columns: [...columns, getUniqValue(columns[0])]});\n  };\n\n  onAddRowClick = () => {\n    const {rows} = this.state;\n    this.setState({rows: [...rows, getUniqValue(rows[0])]});\n  };\n\n  onDelColClick = () => {\n    const {columns, activeIndexes} = this.state;\n    if (columns.length === 1) return;\n    columns.splice(activeIndexes[1], 1);\n    this.setState({columns});\n\n    if (columns.length === activeIndexes[1] || columns.length === 1) this.hideDelButtons();\n  };\n\n  onDelRowClick = () => {\n    const {rows, activeIndexes} = this.state;\n    if (rows.length === 1) return;\n    rows.splice(activeIndexes[0], 1);\n    this.setState({rows});\n\n    if (rows.length === activeIndexes[0] || rows.length === 1) this.hideDelButtons();\n  };\n\n  render() {\n    const {cellSize} = this.props;\n    const {rows, columns, delBtnStyles} = this.state;\n\n    return (\n      <div className=\"grid\">\n        <ActionButton\n          className=\"add-btn-row\"\n          cellSize={cellSize}\n          onClick={this.onAddRowClick}/>\n        <ActionButton\n          className=\"add-btn-col\"\n          cellSize={cellSize}\n          onClick={this.onAddColClick}/>\n        <ActionButton\n          className=\"del-btn-row\"\n          cellSize={cellSize}\n          text=\"-\"\n          style={delBtnStyles[0]}\n          onClick={this.onDelRowClick}/>\n        <ActionButton\n          className=\"del-btn-col\"\n          cellSize={cellSize}\n          text=\"-\"\n          style={delBtnStyles[1]}\n          onClick={this.onDelColClick}/>\n\n        <GridFields\n          rows={rows}\n          columns={columns}\n          cellSize={cellSize}\n          onColMouseOver={this.onColMouseOver}\n          onGridMouseLeave={this.onGridMouseLeave}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Grid from './grid/Grid';\n\nclass App extends Component {\n\n  render(){\n    return <Grid initialWidth={4} initialHeight={4} cellSize=\"50px\" />\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}